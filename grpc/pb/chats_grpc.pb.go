// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chats.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatsServiceClient is the client API for ChatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatsServiceClient interface {
	ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error)
	GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error)
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	AddUsersToChat(ctx context.Context, in *AddUsersToChatRequest, opts ...grpc.CallOption) (*AddUsersToChatResponse, error)
	DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error)
	GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error)
	GetChatUserMessages(ctx context.Context, in *GetChatUserMessagesRequest, opts ...grpc.CallOption) (*GetChatUserMessagesResponse, error)
}

type chatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatsServiceClient(cc grpc.ClientConnInterface) ChatsServiceClient {
	return &chatsServiceClient{cc}
}

func (c *chatsServiceClient) ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error) {
	out := new(ListChatsResponse)
	err := c.cc.Invoke(ctx, "/ChatsService/ListChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error) {
	out := new(GetChatResponse)
	err := c.cc.Invoke(ctx, "/ChatsService/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, "/ChatsService/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) AddUsersToChat(ctx context.Context, in *AddUsersToChatRequest, opts ...grpc.CallOption) (*AddUsersToChatResponse, error) {
	out := new(AddUsersToChatResponse)
	err := c.cc.Invoke(ctx, "/ChatsService/AddUsersToChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error) {
	out := new(DeleteChatResponse)
	err := c.cc.Invoke(ctx, "/ChatsService/DeleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error) {
	out := new(GetChatMessagesResponse)
	err := c.cc.Invoke(ctx, "/ChatsService/GetChatMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) GetChatUserMessages(ctx context.Context, in *GetChatUserMessagesRequest, opts ...grpc.CallOption) (*GetChatUserMessagesResponse, error) {
	out := new(GetChatUserMessagesResponse)
	err := c.cc.Invoke(ctx, "/ChatsService/GetChatUserMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatsServiceServer is the server API for ChatsService service.
// All implementations must embed UnimplementedChatsServiceServer
// for forward compatibility
type ChatsServiceServer interface {
	ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error)
	GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error)
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	AddUsersToChat(context.Context, *AddUsersToChatRequest) (*AddUsersToChatResponse, error)
	DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error)
	GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error)
	GetChatUserMessages(context.Context, *GetChatUserMessagesRequest) (*GetChatUserMessagesResponse, error)
	mustEmbedUnimplementedChatsServiceServer()
}

// UnimplementedChatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatsServiceServer struct {
}

func (UnimplementedChatsServiceServer) ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChats not implemented")
}
func (UnimplementedChatsServiceServer) GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedChatsServiceServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatsServiceServer) AddUsersToChat(context.Context, *AddUsersToChatRequest) (*AddUsersToChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToChat not implemented")
}
func (UnimplementedChatsServiceServer) DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedChatsServiceServer) GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedChatsServiceServer) GetChatUserMessages(context.Context, *GetChatUserMessagesRequest) (*GetChatUserMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatUserMessages not implemented")
}
func (UnimplementedChatsServiceServer) mustEmbedUnimplementedChatsServiceServer() {}

// UnsafeChatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatsServiceServer will
// result in compilation errors.
type UnsafeChatsServiceServer interface {
	mustEmbedUnimplementedChatsServiceServer()
}

func RegisterChatsServiceServer(s grpc.ServiceRegistrar, srv ChatsServiceServer) {
	s.RegisterService(&ChatsService_ServiceDesc, srv)
}

func _ChatsService_ListChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).ListChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatsService/ListChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).ListChats(ctx, req.(*ListChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatsService/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetChat(ctx, req.(*GetChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatsService/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_AddUsersToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersToChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).AddUsersToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatsService/AddUsersToChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).AddUsersToChat(ctx, req.(*AddUsersToChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatsService/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).DeleteChat(ctx, req.(*DeleteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatsService/GetChatMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetChatMessages(ctx, req.(*GetChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_GetChatUserMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatUserMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetChatUserMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatsService/GetChatUserMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetChatUserMessages(ctx, req.(*GetChatUserMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatsService_ServiceDesc is the grpc.ServiceDesc for ChatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatsService",
	HandlerType: (*ChatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChats",
			Handler:    _ChatsService_ListChats_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _ChatsService_GetChat_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _ChatsService_CreateChat_Handler,
		},
		{
			MethodName: "AddUsersToChat",
			Handler:    _ChatsService_AddUsersToChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _ChatsService_DeleteChat_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _ChatsService_GetChatMessages_Handler,
		},
		{
			MethodName: "GetChatUserMessages",
			Handler:    _ChatsService_GetChatUserMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chats.proto",
}
